#!/bin/env bash

# 1. 能够解析常用的参数
# 2. 接受目录或文件
# 3. 尽可能地解释用户传入的参数(很完美，几乎完全避免了和文件名或模式冲突)
#   1. 1,10 depth[1,10] 1h,1dchanged-time[1h,1d]
#   2. 1d,1h [1d,1h] 2024-04-20,2024-04-25
#   3. cc,py. => .cc files
#   4. +[types]
#   5. , 去除所有的depth标志

help() {
    >&2 echo 'usage: ff [OPTIONS] [DIRECTORIES or Files]

    OPTIONS:
        -g glob-based search
        -p full-path
        -t char set, file types dfxlspebc (-t t...)
        -T string, changed after time ( 1min 1h 1d(default) 2weeks "2018-10-27 10:00:00" 2018-10-27)
        -d int, max-depth
        -H bool, --hidden
        -I bool, --no-ignore
        -P no-popup
        -F full-window
        -e extensions
        -E exclude glob pattern
        -o select + -O
        -O output to stdout
        -q Cancel the first n matching file names (Optional default 1)

        --help 
        --split Explain the parameters passed in by the user as much as possible \
            priority: file_or_directory > depth > type > depth_and_type > change_time > extensions > pattern (Optional default all)
        --extra-args pass -> fd

    KEYBINDINGS:
        ctrl-s horizontal direction splitw
        ctrl-v vertical direction splitw
        ctrl-o fzf-tmux-menu splitw
        alt-e subshell editor
        alt-enter open dirname file
    '
}

__split() {
    while read -d " " -r entry; do
        # echo "|$entry|"
        # 解释为目录和文件
        __split_directory_or_file && continue
        # 解释为文件类型
        [[ $flag_split -eq 1 || " $flag_split " == *" types "* ]] && __split_types && continue
        # 解释为拓展名
        [[ $flag_split -eq 1 || " $flag_split " == *" extensions "* ]] && __split_extensions && continue
        # 解释为目录的深度区间
        [[ $flag_split -eq 1 || " $flag_split " == *" depth_interval "* ]] && __split_depth_interval && continue
        # 解释为时间线的区间
        [[ $flag_split -eq 1 || " $flag_split " == *" time_interval "* ]] && __split_time_interval && continue
        # 解释为正则或通配模式
        [[ $flag_split -eq 1 || " $flag_split " == *" pattern "* ]] && __split_pattern || exit 1
    done <&0
    set +x
}
__split_pattern() {
    [[ $Pattern ]] && {
        echo "$entry error, pattern is exists" 2> /dev/tty
        return 1
    }
    Pattern=$entry
    return 0
}
__split_types() {
    [[ "$entry" =~ ^\+[dfxlspebchiHI]+$ ]] || return 1

    typeset type types
    types=${entry/#+/}
    for ((i = 0; i < ${#types}; ++i)); do
        type=${types:$i:1}
        [[ $type == H ]] && flag_other_args+="--hidden " && continue
        [[ $type == h ]] && flag_other_args=${flag_other_args//--hidden /} && continue
        [[ $type == I ]] && flag_other_args+="--no-ignore " && continue
        [[ $type == i ]] && flag_other_args=${flag_other_args//--no-ignore /} && continue
        flag_types+="-t$type "
    done
    return 0
}
__split_depth_interval() {
    [[ "$entry" =~ ^[[:digit:]]{1,2}?,[[:digit:]]{1,2}?$ ]] || return 1

    typeset min_depth max_depth
    [[ ${min_depth:=${entry%,*}} ]] && flag_other_args+="--min-depth=$min_depth "
    [[ ${max_depth:=${entry#*,}} ]] && flag_other_args+="--max-depth=$max_depth "
    [[ -z $min_depth$max_depth ]] && {
        flag_other_args=${flag_other_args//--min-depth=?[[:digit:][:space:]]/}
        flag_other_args=${flag_other_args//--max-depth=?[[:digit:][:space:]]/}
    }
    return 0
}
__split_time_interval() {
    [[ "$entry" =~ ^([[:digit:]]+[mhdwMy]|[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}|[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[[:blank:]][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2})?,([[:digit:]]+[mhdwMy]|[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}|[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}[[:blank:]][[:digit:]]{2}:[[:digit:]]{2}:[[:digit:]]{2})?$ ]] || return 1

    typeset min_time max_time

    [[ ${min_time:=${entry%,*}} ]] && flag_other_args+="--changed-after=$min_time "
    [[ ${max_time:=${entry#*,}} ]] && flag_other_args+="--changed-before=$max_time "
    return 0
}
__split_extensions() {
    [[ "$entry" =~ ^[^.] ]] && [[ "$entry" =~ \.$ ]] || return 1

    while read -d "," -r; do
        flag_other_args+="--extension=$REPLY "
    done <<< "${entry/%./,}"
    return 0
}
__split_directory_or_file() {
    typeset prefix_path
    [[ $flag_prefix ]] && prefix_path=$flag_prefix/$entry || prefix_path=$entry
    { [[ ! -e "$prefix_path" ]] || ((flag_q-- > 0)); } && return 1
    [[ -d $prefix_path ]] && Directories+="$prefix_path " || Files+="$prefix_path "
    return 0
}

__filter_files() {
    Files=
    while read -d " " -r file; do
        pattern_file=$(basename "$file")
        ((flag_full_path)) && pattern_file=$file
        # shellcheck disable=SC2053
        [[ $flag_g && "$pattern_file" == $Pattern ]] && Files+="$file "
        [[ -z $flag_g && "$pattern_file" =~ $Pattern ]] && Files+="$file "
    done <&0
}
__exec_action() {
    typeset trigger_key file

    trigger_key=$(grep -o -P "^(ctrl|alt)-\w+$" < <(echo "$Results" | sed -n '1p'))
    [[ $trigger_key ]] && Results=$(echo "$Results" | sed -n '1!p')
    file=$(echo "$Results" | sed -n '1p')
    Results=$(tr '\n' ' ' <<< "$Results")

    # echo "$Results"
    if [[ "${trigger_key}" == "ctrl-s" ]]; then
        tmux splitw -bh zsh -c "echo ${Results} | xargs ${EDITOR} $Results"
    elif [[ "${trigger_key}" == "ctrl-v" ]]; then
        tmux splitw -bv zsh -c "${EDITOR} $Results"
    elif [[ "${trigger_key}" == "ctrl-o" ]]; then
        # shellcheck disable=SC2046
        # shellcheck disable=SC2086
        "$CUSTOM_HOME/scripts/tmux/tmux-menu" $(realpath $Results)
    elif [[ "${trigger_key}" == "alt-enter" ]]; then
        # eval "${EDITOR} $(dirname "$file") > /dev/tty < /dev/tty"
        "${EDITOR}" "$(dirname "$file")" > /dev/tty < /dev/tty
    else
        # shellcheck disable=SC2086
        eval "${EDITOR} ${Results} > /dev/tty < /dev/tty"
    fi
}

main() {
    typeset flag_P flag_F flag_O flag_q flag_full_path flag_prefix flag_split flag_g flag_types flag_other_args

    args=$(getopt -o HId:t::T:e:E:PFoOgpq:: -l help,split::,type::,prefix:,extra-args: -n "$0" -- "$@")
    eval set -- "$args"

    while true; do
        case "$1" in
        --help)
            help
            exit 0
            ;;
        --split)
            flag_split=${2:-1}
            shift 2
            ;;
        --extra-args)
            flag_other_args+="$2 "
            shift 2
            ;;
        --prefix)
            flag_prefix=$2
            shift 2
            ;;
        -q)
            flag_q=${2:-1}
            shift 2
            ;;
        -p)
            flag_full_path=1
            shift
            ;;
        -g)
            flag_g=1
            flag_other_args+="--glob "
            shift
            ;;
        -O | -o)
            [[ $1 == -o ]] && flag_O=1 || flag_O=-1
            shift
            ;;
        -F)
            flag_F=1
            shift
            ;;
        -P)
            flag_P=1
            shift
            ;;
        -t | --type)
            [[ $2 ]] && for ((i = 0; i < ${#2}; ++i)); do
                flag_types+="-t${2:$i:1} "
            done || flag_types+=
            shift 2
            ;;
        -T)
            flag_other_args+="--changed-after=$2 "
            shift 2
            ;;
        -H)
            flag_other_args+="--hidden "
            shift
            ;;
        -I)
            flag_other_args+="--no-ignore "
            shift
            ;;
        -d)
            flag_other_args+="--max-depth=$2 "
            shift 2
            ;;
        -e)
            while read -d "," -r ext; do
                flag_other_args+="--extension=$ext "
            done <<< "$2,"
            shift 2
            ;;
        -E)
            while read -d "," -r glob; do
                flag_other_args+="--exclude=$glob "
            done <<< "$2,"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        ?)
            echo "args error"
            exit 1
            ;;
        esac
    done

    [[ -v TMUX && -z $flag_P ]] && command -v fzf-tmux &> /dev/null &&
        if [[ $flag_F ]]; then fzf_bin="fzf-tmux -p100%,100%"; else fzf_bin="fzf-tmux $FZF_TMUX_OPTS"; fi

    typeset Directories Files Results Pattern Flag_file Flag_directory
    typeset dir_cmd file_cmd opts

    [[ $* ]] && __split <<< "$* "
    [[ $Files ]] && Flag_file=1
    [[ $Directories ]] && Flag_directory=1
    # 如果只传入了., 则去掉, 为了好看
    [[ "$Directories" =~ ^[[:blank:]]*\.[[:blank:]]*$ ]] && Directories=
    [[ $Pattern && $Files ]] && __filter_files <<< "$Files"

    file_cmd="printf %s\\\n $Files | lscolors"
    dir_cmd="command fd --color=always --follow \
        ${flag_types--tf} $flag_other_args \
        '${Pattern:-^}' ${Directories}"
    set +x
    opts="
    $FZF_DEFAULT_OPTS
    --prompt 'Files> '
    --exit-0
    --scheme path --exact --tiebreak \"length,end,chunk,index\"
    --delimiter / --nth -1,-2
    --header \":: keybindings:C-s, C-v, C-o, A-e, A-enter\"
    --expect \"ctrl-s,ctrl-v,ctrl-o,alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {+} > /dev/tty < /dev/tty)\"
    --bind=\"ctrl-s:accept\"
    --bind=\"ctrl-v:accept\"
    --bind=\"ctrl-o:accept\"
    --bind=\"enter:accept\"
    --bind=\"alt-enter:accept\"
    $FZF_CUSTOM_OPTS
    "

    Results=$(
        {
            [[ $Files ]] && eval "$file_cmd"
            ((!Flag_file || Flag_directory)) && eval "$dir_cmd"
        } | if ((flag_O >= 0)); then FZF_DEFAULT_OPTS="$opts" ${fzf_bin:-fzf}; else cat; fi | sed -e '/^$/d' -e 's/ /\\ /'
    )

    [[ ${Results} ]] && if ((flag_O)) && ! grep -Ex "(ctrl|alt)-\w+" < <(echo "$Results" | sed -n '1p'); then echo "$Results"; else __exec_action; fi
}
main "$@"
