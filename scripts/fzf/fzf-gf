#!/bin/env bash

help() {
    >&2 echo 'usage: fg [OPTIONS] [init_query]

    OPTIONS:
        -m + --modified
        -d + --deleted
        -s + --stage
        -k + --killed
        -o + --others
        -i + --ignored
        -P no-popup
        -u + --untracked-file=all
    '
    exit
}

exec_action() {
    if [[ ${#files[@]} -eq 1 ]]; then
        mkdir -p "$(dirname "${files[0]}")" &> /dev/null
        "${EDITOR}" "${files[@]}" > /dev/tty < /dev/tty
        return 0
    fi

    trigger_key=${files[0]}
    unset "files[0]"

    if [[ "${trigger_key}" == "ctrl-s" ]]; then
        tmux splitw "-bh" zsh -c "${EDITOR} ${files[*]}"
    elif [[ "${trigger_key}" == "ctrl-v" ]]; then
        tmux splitw "-bv" zsh -c "${EDITOR} ${files[*]}"
    elif [[ "${trigger_key}" == "ctrl-o" ]]; then
        "$CUSTOM_HOME/scripts/tmux/tmux-menu" $(realpath "${files[@]}")
    else
        "${EDITOR}" "${files[@]}" > /dev/tty < /dev/tty
    fi
}

main() {
    [[ $# -gt 1 && "$1" == help ]] && help
    [[ -v TMUX ]] && command -v fzf-tmux &> /dev/null && fzf_bin="fzf-tmux $FZF_TMUX_OPTS"

    # 判断是否是一个git目录
    if ! git rev-parse --is-inside-work-tree &> /dev/null; then
        echo "this is not a git directory"
        exit 1
    fi
    # global
    typeset files cmd opts action_file

    # args
    typeset -a git_flags
    typeset args

    args=$(getopt -o mdskioP -n "$0" -- "$@")
    if [[ "$?" -ne 0 ]]; then
        echo "getopt parse error, args:${*}"
        exit 1
    fi
    eval set -- "$args"

    while true; do
        case $1 in
        -P)
            fzf_bin=
            shift
            ;;
        -m)
            git_flags+=("--modified")
            shift
            ;;
        -d)
            git_flags+=("--deleted")
            shift
            ;;
        -s)
            git_flags+=("--stage")
            shift
            ;;
        -k)
            git_flags+=("--killed")
            shift
            ;;
        -i)
            git_flags+=("--ignored")
            shift
            ;;
        -o)
            git_flags+=("--others")
            shift
            ;;
        # -u)
        #     flag_untracked=1
        #     shift
        #     ;;
        --)
            shift
            break
            ;;
        *)
            echo "flag error"
            exit 1
            ;;

        esac
    done

    if ! cd "$(git rev-parse --show-toplevel)" &> /dev/null; then
        echo "git not exists"
        exit 1
    fi
    if [[ $# -gt 0 ]]; then
        filter=1
        fzf_bin=
    fi

    # action_file=/tmp/gitfiles$$
    # trap "command rm -f $action_file" EXIT SIGINT SIGTERM

    cmd="
    f() { (
        git status -s --porcelain | sed -n '/^??/!p'
        git ls-files --exclude-standard --with-tree=HEAD ${git_flags[*]} | sed 's/^/   /'
        [[ \" \$* \" == *untracked* ]] && git status -s --porcelain --untracked-file=all | sed -n '/^??/p'
        ) | awk '!x[\$NF]++{print}' | sed -E 's/^(..)/[\1]/' | awk '{
        cmd=\"echo \"\$NF\" | zsh -c lscolors\"
        printf(\"%s \", substr(\$0, 1, 4)) 
        system(cmd)
      }'; 
    }
    "
    git_actions_toggle="
        if [[ \$FZF_PROMPT =~ ^Gitfiles ]]; then
            echo \\\"change-prompt(GitActions > )+rebind(A,U,M)\\\"
        else
            echo \\\"change-prompt(Gitfiles > )+unbind(A,U,M)\\\"
        fi
    "
    gitfile_extract="sed -r 's/\[.\{2}\]//g'"

    preview="
        file=\$(echo {} | sed -r 's/^\\\[.*\\\] //')
        if (git status -s -- \\\"\$file\\\" | grep '^.M') &>/dev/null; then
            git diff --color=always -- \\\"\$file\\\" | delta
        elif (git status -s -- \\\"\$file\\\" | grep '^M.') &>/dev/null; then
            git diff --cached --color=always -- \\\"\$file\\\" | delta
        else
            bkt --ttl 1m -- bat --style=numbers --color=always -- \\\"\$file\\\"
        fi"

    opts="
    $FZF_DEFAULT_OPTS
    --prompt=\"Gitfiles> \" 
    ${filter:+--filter \"$*\"}
    --scheme path --exact --tiebreak \"end,chunk,index\" 
    --delimiter / --nth -1 --exit-0 
    --header \"keybindings:C-s, C-v, C-o, C-g, A-e, Enter, ?(AUM)\"
    --expect \"ctrl-s,ctrl-v,ctrl-o\"
    --preview=\"$preview\"
    --bind=\"start:unbind(A,U,M)\"
    --bind=\"ctrl-s:accept\"
    --bind=\"ctrl-v:accept\"
    --bind=\"ctrl-o:accept\"
    --bind=\"enter:accept-or-print-query\"
    --bind=\"?:transform:$git_actions_toggle\"
    "

    readarray -t files < <(
        eval "$cmd f" | FZF_DEFAULT_OPTS="$opts" ${fzf_bin:-fzf} \
            --bind="alt-e:execute(${EDITOR} \$(echo {+} | $gitfile_extract) > /dev/tty < /dev/tty)" \
            --bind="A:execute(git add \$(echo {+} | $gitfile_extract))+reload($cmd f)" \
            --bind="U:execute(git restore --staged \$(echo {+} | $gitfile_extract))+reload($cmd f)" \
            --bind="M:execute(git restore \$(echo {+} | $gitfile_extract))+reload($cmd f)" \
            --bind="ctrl-g:reload($cmd f untracked)" |
            awk '{print $NF}'
    )

    [[ ${filter} ]] && files=("${files[0]}")
    [[ ${#files[@]} -gt 0 ]] && exec_action
}

main "$@"
