#!/bin/env bash

# 1. 能够解析常用的参数
# 2. 接受目录或文件
# 3. 能够在fzf过滤时，解释--iglob --hidden --no-ignore --max-depth
# 4. 尽可能解释用户传入的参数
#   1. ,10 max-depth=10
#   2. cpp. --type=cpp cc! --type-not=c
#   3. , 去除所有的depth标志
# 5. 解决了\b的转义问题

help() {
    >&2 echo 'usage: ss [OPTIONS] [pattern] [DIRECTORIES or Files]

    OPTIONS:
        -t file types,  Comma-separated
        -T file types(not),  Comma-separated
        -d int max-depth
        -H bool --hidden
        -I bool --no-ignore 
        -q Cancel the first n matching file names (Optional, default 1)
        -w world regex
        -u[uu] (Optional default -u)
        -O output to stdout
        -P no-popup 
        -F full-window

        --help 
        --split Explain the parameters passed in by the user as much as possible \
            priority: file_or_directory > max_depth > type > pattern (Optional default all)
        --extra-args pass -> rg

    KEYBINDINGS:
        ctrl-s horizontal direction splitw
        ctrl-v vertical direction splitw
        ctrl-o fzf-tmux-menu splitw
        alt-e subshell editor
        alt-enter open dirname file
    '
}

__split() {
    while read -d " " -r entry; do
        # echo "|$entry|"
        # 解释为目录和文件
        __split_directory_or_file && continue
        # 解释为文件类型
        [[ $flag_split -eq 1 || " $flag_split " == *" types "* ]] && __split_types && continue
        [[ $flag_split -eq 1 || " $flag_split " == *" not_types "* ]] && __split_not_types && continue
        # 解释为目录的深度区间
        [[ $flag_split -eq 1 || " $flag_split " == *" depth_interval "* ]] && __split_depth_interval && continue
        # 解释为正则或通配模式
        [[ $flag_split -eq 1 || " $flag_split " == *" pattern "* ]] && __split_pattern || exit 1
    done <&0
    set +x
}
__split_pattern() {
    [[ -n $Pattern ]] && {
        echo "$entry error, pattern is exists" &> /dev/tty
        return 1
    }
    Pattern=$entry
    return 0
}

__split_depth_interval() {
    [[ "$entry" =~ ^[[:digit:]]{1,2}?,[[:digit:]]{1,2}?$ ]] || return 1

    typeset max_depth
    [[ ${max_depth:=${entry#*,}} ]] && flag_other_args+="--max-depth=$max_depth "
    [[ -z $max_depth ]] && {
        flag_other_args=${flag_other_args//--max-depth=?[[:digit:][:space:]]/}
    }
    return 0
}

__split_types() {
    [[ "$entry" =~ ^[^.] ]] && [[ "$entry" =~ \.$ ]] || return 1

    while read -d "," -r; do
        flag_other_args+="--type=$REPLY "
    done <<< "${entry/%./,}"
    return 0
}

__split_not_types() {
    [[ "$entry" =~ ^[^\!] ]] && [[ "$entry" =~ !$ ]] || return 1

    while read -d "," -r; do
        flag_other_args+="--type-not=$REPLY "
    done <<< "${entry/%!/,}"
    return 0
}

__split_directory_or_file() {
    { [[ ! -e "$entry" ]] || ((flag_q-- > 0)); } && return 1
    [[ -d $entry ]] && Directories+="$entry " || Files+="$entry "
}

__exec_action() {
    typeset trigger_key file line_number

    trigger_key=$(grep -o -P "^(ctrl|alt)-\w+$" < <(echo "$Results" | sed -n '1p'))
    [[ $trigger_key ]] && Results=$(echo "$Results" | sed -n '1!p')
    file=$(echo "$Results" | cut -d: -f 1)
    line_number=$(echo "$Results" | cut -d: -f 2)

    if [[ "${trigger_key}" == "ctrl-s" ]]; then
        tmux splitw -bv zsh -c "${EDITOR} $file +$line_number"
    elif [[ "${trigger_key}" == "ctrl-v" ]]; then
        tmux splitw -bh zsh -c "${EDITOR} $file +$line_number"
    elif [[ "${trigger_key}" == "ctrl-o" ]]; then
        "$CUSTOM_HOME/scripts/tmux/tmux-menu" "$(realpath "$file")" "+$line_number"
    elif [[ "${trigger_key}" == "alt-enter" ]]; then
        "${EDITOR}" "$(dirname "$file")" > /dev/tty < /dev/tty
    else
        ${EDITOR} "$file" "+$line_number" > /dev/tty < /dev/tty
    fi
}

main() {
    typeset flag_P flag_F flag_O flag_q flag_split flag_other_args

    args=$(getopt -o d:t:T:u::q::wHIPFO -l help,split::,extra-args: -n "$0" -- "$@")
    eval set -- "$args"

    while true; do
        case "$1" in
        --help)
            help
            exit 0
            ;;
        --split)
            flag_split=${2:-1}
            shift 2
            ;;
        --extra-args)
            flag_other_args+="$2 "
            shift 2
            ;;
        -O)
            flag_O=1
            shift
            ;;
        -q)
            flag_q=${2:-1}
            shift 2
            ;;
        -w)
            flag_other_args+="-w "
            shift
            ;;
        -u)
            flag_other_args+="-u$2 "
            shift 2
            ;;
        -F)
            flag_F=1
            shift
            ;;
        -P)
            flag_P=1
            shift
            ;;
        -t)
            while read -d "," -r type; do
                flag_other_args+="--type=$type "
            done <<< "$2,"
            shift 2
            ;;
        -T)
            while read -d "," -r type; do
                flag_other_args+="--type-not=$type "
            done <<< "$2,"
            shift 2
            ;;
        -H)
            flag_other_args+="--hidden "
            shift
            ;;
        -I)
            flag_other_args+="--no-ignore "
            shift
            ;;
        -d)
            flag_other_args+="--max-depth=$2 "
            shift 2
            ;;
        --)
            shift
            break
            ;;
        ?)
            echo "args error"
            exit 1
            ;;
        esac
    done

    [[ -v TMUX && -z $flag_P ]] && command -v fzf-tmux &> /dev/null &&
        if [[ $flag_F ]]; then fzf_bin="fzf-tmux -p100%,100%"; else fzf_bin="fzf-tmux $FZF_GREP_TMUX_OPTS"; fi

    typeset Directories Files Results Pattern
    typeset cmd opts file_r file_f file_preview_size
    typeset change_preview change_reload toggle_search initial_search

    [[ $* ]] && __split <<< "$* "
    [[ "$Directories" =~ ^[[:blank:]]*\.[[:blank:]]*$ ]] && Directories=

    cmd="command rg --line-number --no-heading --color=always --smart-case ${flag_other_args}"
    file_r=/tmp/f-$$
    file_f=/tmp/r-$$
    file_preview_size=/tmp/preview-size-$$

    # shellcheck disable=SC2064
    trap "command rm -f $file_r $file_f $file_preview_size" EXIT SIGINT SIGTERM

    # zsh版本
    change_reload="
    setopt extended_glob
    typeset args
    [[ \$FZF_QUERY == *--* ]] && for elem in \${(s/ /)\${FZF_QUERY##*--}}; do 
        case \$elem in
            H) args+=\\\"--hidden \\\" ;;
            I) args+=\\\"--no-ignore \\\" ;;
            (<1->|),(<1->|)) args+=\\\"--max-depth=\${\${elem#*,}:-99} \\\" ;;
            [[:lower:]]##.) args+=\\\"--type=\${elem%.} \\\" ;;
            [[:lower:]]##!) args+=\\\"--type-not=\${elem%.} \\\" ;;
            *) args+=\\\"'--iglob=\$elem' \\\" ;;
        esac
    done
    print -r \\\"reload(${cmd} \$args -- '\${\${FZF_QUERY%--*}%% #}' ${Directories} ${Files} || true)\\\"
    "

    change_preview="
    typeset lines=\$((FZF_LINES - 3))  match_count=\$FZF_MATCH_COUNT preview_lines=\${FZF_PREVIEW_LINES:-\${\$(<$file_preview_size):-0}}
    typeset b1=10000 b2=1000 b3=100 per1=0 per2=30 per3=60 result
    if ((match_count == 0 || match_count > b1)); then
        result=0
    elif ((match_count > b2)); then
        result=\$((((b1 - match_count) * (per2 - per1) / (b1 - b2)  + per1) * lines / 100))
    elif ((match_count > b3)); then
        result=\$((((b2 - match_count) * (per3 - per2) / (b2 - b3)  + per2) * lines / 100))
    elif ((match_count > (lines - preview_lines))); then
        result=\$preview_lines
    else
        result=$\((lines - match_count))
    fi
    # print lines:\$lines match_count:\$match_count preview_lines:\$preview_lines result:\$result >> /home/mjj/.custom/scripts/fzf/debug.log
    print \$result > $file_preview_size 
    print \\\"change-preview-window(\$result)\\\"
    "

    toggle_search="
    if [[ ! \$FZF_PROMPT =~ Rg ]]; then
        echo \\\"rebind(change)+change-prompt(Rg> )+disable-search+transform-query:echo -E \\\{q} > $file_f; cat $file_r\\\"
    else
        echo \\\"unbind(change)+change-prompt(Fzf> )+enable-search+transform-query:echo -E \\\{q} > $file_r; cat $file_f\\\"
    fi
    "

    initial_search="
    if [[ -z '\{q}' ]]; then
        echo \\\"ignore\\\"
    else
        echo \\\"reload:${cmd} -- \\\{q} ${Directories} ${Files}\\\"
    fi
    "

    opts="
    $FZF_DEFAULT_OPTS
    --layout=reverse-list --disabled +m
    --query '$Pattern'
    --prompt \"Rg> \"
    --exact
    --bind=\"start:transform:$initial_search\"
    --bind \"change:transform:$change_reload\"
    --bind \"result:transform:$change_preview\"
    --bind \"resize:transform:$change_preview\"
    --bind \"ctrl-t:transform:$toggle_search\"
    --delimiter :
    --header-first --header=\"keybindings:: C-s, C-v, C-o, A-e, A-enter | pattern:: H I ,10 *.cc cpp. c!\"
    --preview-window \"up:~1,+{2}/2:border-down\"
    --preview 'bat --style=numbers,header,changes,snip,numbers --color=always --highlight-line {2} -- {1}'
    --expect \"ctrl-s,ctrl-v,ctrl-o,alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {1} +{2} > /dev/tty < /dev/tty)\"
    --bind=\"ctrl-s:accept\"
    --bind=\"ctrl-v:accept\"
    --bind=\"ctrl-o:accept\"
    --bind=\"enter:accept\"
    --bind=\"alt-enter:accept\"
    "

    Results=$(: | FZF_DEFAULT_OPTS=$opts ${fzf_bin:-fzf} | grep -v "^$")

    [[ $Results ]] && if [[ $flag_O ]]; then echo "$Results"; else __exec_action; fi
}
main "$@"
