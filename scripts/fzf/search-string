#!/bin/env bash

help() {
    >&2 echo 'usage: ss [OPTIONS] [init_query] [DIRECTORIES or Files]

    OPTIONS:
        -t file types,  Comma-separated
        -T file types(not),  Comma-separated
        -D int max-depth
        -H bool --hidden
        -I bool --no-ignore 
        -q first param is not a init_query
        -w world regex
        -u[uu]
        -P no-popup 
        -F full-window

    KEYBINDINGS:
        ctrl-s horizontal direction splitw
        ctrl-v vertical direction splitw
        alt-e fzf-tmux-menu splitw
    '
}
__split_dirs_and_files() {
    while read -d " " -r entry; do
        if [[ -d $entry ]]; then
            Directories+="$entry "
        else
            Files+="$entry "
        fi
    done <&0
}

__exec_action() {
    typeset trigger_key file line_number

    trigger_key=$(grep -o -P "^(ctrl|alt)-\w+$" < <(echo "$Results" | sed -n '1p'))
    [[ $trigger_key ]] && Results=$(echo "$Results" | sed -n '1!p')
    file=$(echo "$Results" | cut -d: -f 1)
    line_number=$(echo "$Results" | cut -d: -f 2)

    if [[ "${trigger_key}" == "ctrl-s" ]]; then
        tmux splitw -bv zsh -c "${EDITOR} $file +$line_number"
    elif [[ "${trigger_key}" == "ctrl-v" ]]; then
        tmux splitw -bh zsh -c "${EDITOR} $file +$line_number"
    elif [[ "${trigger_key}" == "ctrl-o" ]]; then
        "$CUSTOM_HOME/scripts/tmux/tmux-menu" $(realpath $file) +$line_number
    elif [[ "${trigger_key}" == "alt-enter" ]]; then
        "${EDITOR}" "$(dirname $file)" > /dev/tty < /dev/tty
    else
        ${EDITOR} $file +$line_number > /dev/tty < /dev/tty
    fi
}

main() {
    typeset flag_P flag_F flag_q flag_max_depth flag_other_args

    args=$(getopt -o D:t:T:u::qwHIPF -l help -n "$0" -- "$@")
    eval set -- "$args"

    while true; do
        case "$1" in
        --help)
            help
            exit 0
            ;;
        -q)
            flag_q=1
            shift
            ;;
        -w)
            flag_other_args+="-w "
            shift
            ;;
        -u)
            flag_other_args+="-u$2 "
            shift 2
            ;;
        -F)
            flag_F=1
            shift
            ;;
        -P)
            flag_P=1
            shift
            ;;
        -t)
            while read -d "," -r type; do
                flag_other_args+="--type=$type "
            done <<< "$2,"
            shift 2
            ;;
        -T)
            while read -d "," -r type; do
                flag_other_args+="--type-not=$type "
            done <<< "$2,"
            shift 2
            ;;
        -H)
            flag_other_args+="--hidden "
            shift
            ;;
        -I)
            flag_other_args+="--no-ignore "
            shift
            ;;
        -D)
            flag_max_depth=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        ?)
            echo "args error"
            exit 1
            ;;
        esac
    done

    [[ -v TMUX && -z $flag_P ]] && command -v fzf-tmux &> /dev/null &&
        if [[ $flag_F ]]; then fzf_bin="fzf-tmux -p100%,100%"; else fzf_bin="fzf-tmux $FZF_GREP_TMUX_OPTS"; fi

    typeset Directories Files Results
    typeset cmd init_query opts file_r file_f
    typeset transform_change transform_toggle init_bind

    if [[ -z $flag_q ]]; then
        init_query=$1
        shift
    fi
    [[ $* ]] && __split_dirs_and_files <<< "$* "

    cmd="command rg --line-number --no-heading --color=always --smart-case \
          --max-depth=${flag_max_depth:-6} ${flag_other_args}"
    file_r=/tmp/f-$$
    file_f=/tmp/r-$$
    trap "command rm -f $file_r $file_f" EXIT SIGINT SIGTERM

    transform_change="
    setopt extended_glob
    typeset args files
    [[ \$FZF_QUERY == *--* ]] && for elem in \${(s/ /)\${FZF_QUERY##*--}}; do 
        case \$elem in
            H) args+=\\\"--hidden \\\"
            ;;
            I) args+=\\\"--no-ignore \\\"
            ;;
            *) args+=\\\"'--iglob=\$elem' \\\"
            ;;
        esac
    done
    echo \\\"reload:sleep 0.1; ${cmd} \$args '\${FZF_QUERY% ##--*}' ${Directories} ${Files} || true\\\"
    "
    transform_toggle="
    if [[ ! \$FZF_PROMPT =~ Rg ]]; then
        echo \\\"rebind(change)+change-prompt(Rg> )+disable-search+transform-query:echo -E \\\{q} > $file_f; cat $file_r\\\"
    else
        echo \\\"unbind(change)+change-prompt(Fzf> )+enable-search+transform-query:echo -E \\\{q} > $file_r; cat $file_f\\\"
    fi
    "
    init_bind="--bind=\"start:reload:${cmd} \{q} ${Directories} ${Files}\""

    opts="
    $FZF_DEFAULT_OPTS
    --disabled +m
    --query \"$init_query\" --prompt \"Rg> \"
    --exact
    ${init_query:+${init_bind}}
    --bind \"change:transform:$transform_change\"
    --bind \"ctrl-t:transform:$transform_toggle\"
    --delimiter :
    --header \"keybindings: C-t(toggle fzf|rg), C-s(hsp), C-v(vsp), C-o(fzf-tmux-menu), A-e(execute editor),\"
    --preview 'bat --style=numbers,header,changes,snip --color=always --highlight-line {2} -- {1}'
    --preview-window 'default:right:60%:~1:+{2}+3/2:border-left'
    --expect \"ctrl-s,ctrl-v,ctrl-o\"
    --bind=\"alt-e:execute(${EDITOR} {1} +{2} > /dev/tty < /dev/tty)\"
    --bind=\"ctrl-s:accept\"
    --bind=\"ctrl-v:accept\"
    --bind=\"ctrl-o:accept\"
    --bind=\"enter:accept\"
    "

    Results=$(: | FZF_DEFAULT_OPTS=$opts ${fzf_bin:-fzf} | grep -v "^$")

    [[ $Results ]] && __exec_action
}
main "$@"
# parse_directory_mark "$@"
