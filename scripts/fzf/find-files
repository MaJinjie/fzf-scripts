#!/bin/env bash

# 1. 能够解析常用的参数
# 2. 接受目录或文件
# 3. (取消)可从标准输入中接受目录和文件
# 4. (取消)去除掉 -- 目录标志（太麻烦，因此拆分为组合命令实现），转为使用标准输入接受

help() {
    >&2 echo 'usage: ff [OPTIONS] [DIRECTORIES or Files]

    OPTIONS:
        -t char set, file types dfxlspebc
        -T string, changed after time ( 1min 1h 1d(default) 2weeks "2018-10-27 10:00:00" 2018-10-27)
        -D int, max-depth
        -H bool, --hidden
        -I bool, --no-ignore
        -P no-popup

        --input pipe to pass

    KEYBINDINGS:
        ctrl-s horizontal direction splitw
        ctrl-v vertical direction splitw
        alt-e fzf-tmux-menu splitw
        alt-enter open dirname file
    '
}

__split_dirs_and_files() {
    while read -d " " -r entry; do
        if [[ -d $entry ]]; then
            Directories+="$entry "
        else
            Files+="$entry "
        fi
    done <&0
}

__exec_action() {
    typeset trigger_key file

    trigger_key=$(grep -o -P "^(ctrl|alt)-\w+$" < <(echo "$Results" | sed -n '1p'))
    [[ $trigger_key ]] && Results=$(echo "$Results" | sed -n '1!p')
    file=$(echo "$Results" | sed -n '1p')
    Results=$(tr '\n' ' ' <<< "$Results")

    if [[ "${trigger_key}" == "ctrl-s" ]]; then
        tmux splitw -bv zsh -c "${EDITOR} $Results"
    elif [[ "${trigger_key}" == "ctrl-v" ]]; then
        tmux splitw -bh zsh -c "${EDITOR} $Results"
    elif [[ "${trigger_key}" == "ctrl-o" ]]; then
        "$CUSTOM_HOME/scripts/tmux/tmux-menu" $(realpath $Results)
    elif [[ "${trigger_key}" == "alt-enter" ]]; then
        "${EDITOR}" "$(dirname $file)" > /dev/tty < /dev/tty
    else
        ${EDITOR} $Results > /dev/tty < /dev/tty
    fi
}

main() {
    typeset flag_P flag_F flag_max_depth flag_types flag_other_args
    typeset Directories Files

    args=$(getopt -o HID:t:T:e:E:PF -l help -n "$0" -- "$@")
    eval set -- "$args"

    while true; do
        case "$1" in
        --help)
            help
            exit 0
            ;;
        -F)
            flag_F=1
            shift
            ;;
        -P)
            flag_P=1
            shift
            ;;
        -t)
            for ((i = 0; i < ${#2}; ++i)); do
                flag_types+="-t${2:$i:1} "
            done
            shift 2
            ;;
        -T)
            flag_other_args+="--changed-after=$2 "
            shift 2
            ;;
        -H)
            flag_other_args+="--hidden "
            shift
            ;;
        -I)
            flag_other_args+="--no-ignore "
            shift
            ;;
        -D)
            flag_max_depth=$2
            shift 2
            ;;
        -e)
            while read -d "," -r ext; do
                flag_other_args+="--extension=$ext "
            done <<< "$2,"
            shift 2
            ;;
        -E)
            while read -d "," -r glob; do
                flag_other_args+="--exclude=$glob "
            done <<< "$2,"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        ?)
            echo "args error"
            exit 1
            ;;
        esac
    done

    [[ -v TMUX && -z $flag_P ]] && command -v fzf-tmux &> /dev/null &&
        if [[ $flag_F ]]; then fzf_bin="fzf-tmux -p100%,100%"; else fzf_bin="fzf-tmux $FZF_TMUX_OPTS"; fi

    typeset dir_cmd file_cmd opts Results

    [[ $* ]] && __split_dirs_and_files <<< "$* "

    file_cmd="printf %s\n $Files"
    dir_cmd="command fd --color=always --follow --max-depth=${flag_max_depth:-6} \
        ${flag_types--tf} $flag_other_args ${Directories:+^} ${Directories}"

    opts="
    $FZF_DEFAULT_OPTS
    --prompt 'Files> '
    --exit-0
    --scheme path --exact --tiebreak \"length,end,chunk,index\"
    --delimiter / --nth -1,-2
    --header-first --header \"keybindings:C-s, C-v, C-o, A-e, A-enter, Enter\"
    --expect \"ctrl-s,ctrl-v,ctrl-o,alt-enter\"
    --bind=\"alt-e:execute(${EDITOR} {+} > /dev/tty < /dev/tty)\"
    --bind=\"ctrl-s:accept\"
    --bind=\"ctrl-v:accept\"
    --bind=\"ctrl-o:accept\"
    --bind=\"enter:accept\"
    --bind=\"alt-enter:accept\"
    "

    Results=$(
        (
            [[ $Files ]] && $file_cmd | lscolors
            [[ $Directories || -z $Files ]] && $dir_cmd
        ) | (
            FZF_DEFAULT_OPTS="$opts" ${fzf_bin:-fzf}
        ) | grep -v "^$"
    )
    [[ ${Results} ]] && __exec_action
}
main "$@"
