#!/bin/env bash

filter::zoxide() {
    cmd="zoxide query --list" __files_filter "$@"
}
filter::marks() {
    cmd="__toml pmarks" __marks_filter "$@"

}
__toml() {
    toml_path="${CUSTOM_HOME}/scripts/tools/toml"
    config_dir="${CUSTOM_MARKS_FILE:-${XDG_CONFIG_HOME:-${HOME}/.config}/custom}"
    $toml_path "$1" -f "$config_dir/directories.toml" -t "marks" "${@:2}"
}

__files_filter() {
    filter_opts="
    --exact --scheme history
    --tiebreak end,chunk,index
    "
    opts="
    $FZF_DEFAULT_OPTS
    $filter_opts
    --prompt \"Zoxide > \" 
    --delimiter / --nth -1,-2,-3 
    --exit-0
    $FILTER_FZF_DEFAULT_OPTS
    "

    # shellcheck disable=SC2068
    Results=$(
        (
            [[ $Stdin == "before" ]] && cat -
            eval "$cmd" | (if [[ $# -gt 0 ]]; then FZF_DEFAULT_OPTS="$filter_opts" fzf --filter "$*"; else cat; fi) |
                lscolors
            [[ $Stdin == "after" ]] && cat -
        ) | FZF_DEFAULT_OPTS="$opts" ${fzf_bin:-fzf}
    )
    Exit_code=$?
}
__marks_filter() {
    typeset opts marks

    opts="
    $FZF_DEFAULT_OPTS
    --exact
    --tiebreak \"length,begin,chunk,index\"
    $FILTER_FZF_DEFAULT_OPTS
    "

    list=$(eval "$cmd")
    if [[ $# -eq 0 ]]; then
        marks=$(FZF_DEFAULT_OPTS="$opts" ${fzf_bin:-fzf} <<< "$list")
        Exit_code=$?
    else
        for abbr in "$@"; do
            for ((i = 0; i < ${#abbr}; i++)); do
                filter_query+="${abbr:$i:1} "
            done
            mark=$(FZF_DEFAULT_OPTS="$opts" fzf --filter "^${filter_query}" <<< "$list" |
                sed -n '1p')
            if [[ ! ${mark} ]]; then
                printf "%s is not exists\n\n" abbr > /dev/tty
                return 130
            fi
            marks+="$mark "
            filter_query=
            list="${list/${mark}/}"
        done
        Exit_code=0
    fi

    [[ $Exit_code -ne 130 ]] && for mark in $marks; do
        Results+="$(__toml gmark $mark) "
    done
}

main() {
    [[ -v TMUX ]] && command -v fzf-tmux &> /dev/null && fzf_bin="fzf-tmux $FZF_TMUX_OPTS"

    typeset Exit_code Results Stdin

    args=$(getopt -o P -l after,before -n "$0" -- "$@")
    eval set -- "$args"

    while true; do
        case $1 in
        -P)
            fzf_bin=
            shift
            ;;
        --after | --before)
            Stdin=${1:2}
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "arg error"
            exit 1
            ;;
        esac
    done

    command -v filter::$MODE &> /dev/null && filter::$MODE "$@" && [[ $Exit_code -ne 130 ]] && echo -e "$Results"

    return "$Exit_code"
}

valid_modes=(
    "zoxide"
    "git"
    "marks"
)
if [[ $1 == "list" ]]; then
    echo "${valid_modes[@]}"
    exit 0
fi

if [[ -z $1 || " ${valid_modes[*]} " != *"$1"* ]]; then
    echo "$1 not in ${valid_modes[*]}"
    exit 1
fi

MODE=$1
shift

main "$@"
