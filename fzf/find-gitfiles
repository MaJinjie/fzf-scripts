#!/bin/env bash

help() {
    >&2 echo 'usage: fg [OPTIONS] [init_query]

    OPTIONS:
        -m + --modified
        -d + --deleted
        -s + --stage
        -k + --killed
        -o + --others
        -i + --ignored
        -P no-popup
    '
    exit
}

fzf_search() {
    if ! cd "$(git rev-parse --show-toplevel)" &> /dev/null; then
        echo "git not exists"
        exit 1
    fi
    if [[ $# -gt 0 ]]; then
        filter=1
        fzf_bin=
    fi

    readarray -t files < <(
        $git_prefix | lscolors | ${fzf_bin:-fzf} \
            --prompt="Gitfiles> " ${filter:+--filter "$*"} \
            --scheme path --exact --tiebreak "end,chunk,index" \
            --delimiter / --nth -1,-2 \
            --exit-0 --header-first \
            --header "keybindings:C-s(hsp), C-v(vsp), C-o(fzf-tmux-menu), A-e(execute editor), Enter(editor|print)" \
            --expect "ctrl-s,ctrl-v,ctrl-o" \
            --bind="alt-e:execute(${EDITOR} {+} > /dev/tty < /dev/tty)" \
            --bind="ctrl-s:accept" \
            --bind="ctrl-v:accept" \
            --bind="ctrl-o:accept" \
            --bind="enter:accept-or-print-query"
    )

    [[ ${filter} ]] && files=("${files[0]}")
}

exec_action() {
    if [[ ${#files[@]} -eq 1 ]]; then
        mkdir -p "$(dirname "${files[0]}")" &> /dev/null
        "${EDITOR}" "${files[@]}" > /dev/tty < /dev/tty
        return 0
    fi

    trigger_key=${files[0]}
    unset "files[0]"

    if [[ "${trigger_key}" == "ctrl-s" ]]; then
        tmux splitw "-bh" zsh -c "${EDITOR} ${files[*]}"
    elif [[ "${trigger_key}" == "ctrl-v" ]]; then
        tmux splitw "-bv" zsh -c "${EDITOR} ${files[*]}"
    elif [[ "${trigger_key}" == "ctrl-o" ]]; then
        "$CUSTOM_HOME/scripts/tmux/tmux-menu" $(realpath "${files[@]}")
    else
        "${EDITOR}" "${files[@]}" > /dev/tty < /dev/tty
    fi
}

main() {
    [[ $# -gt 1 && "$1" == help ]] && help
    [[ -v TMUX ]] && command -v fzf-tmux &> /dev/null && fzf_bin="fzf-tmux $FZF_TMUX_OPTS"

    # 判断是否是一个git目录
    if ! git rev-parse --is-inside-work-tree &> /dev/null; then
        echo "this is not a git directory"
        exit 1
    fi
    # global
    typeset git_prefix
    typeset -a files

    # args
    typeset -a git_flags
    typeset args

    args=$(getopt -o mdskioP -n "$0" -- "$@")
    if [[ "$?" -ne 0 ]]; then
        echo "getopt parse error, args:${*}"
        exit 1
    fi
    eval set -- "$args"

    while true; do
        case $1 in
        -P)
            fzf_bin=
            shift
            ;;
        -m)
            git_flags+=("--modified")
            shift
            ;;
        -d)
            git_flags+=("--deleted")
            shift
            ;;
        -s)
            git_flags+=("--stage")
            shift
            ;;
        -k)
            git_flags+=("--killed")
            shift
            ;;
        -i)
            git_flags+=("--ignored")
            shift
            ;;
        -o)
            git_flags+=("--others")
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "flag error"
            exit 1
            ;;

        esac
    done

    git_prefix="git ls-files --with-tree=HEAD ${git_flags[*]}"

    # 得到files
    fzf_search "$@"

    [[ ${#files[@]} -gt 0 ]] && exec_action
}

main "$@"
