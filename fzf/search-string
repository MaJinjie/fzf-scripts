#!/bin/env bash

help() {
    >&2 echo 'usage: ss [OPTIONS] [DIRECTORIES] [--] [DIRECTORY MARKS]

    OPTIONS:
        -t bool types files,  Comma-separated
        -D int max-depth
        -h bool cancel --hidden
        -I bool --no-ignore 
        -q char*|string init_query

        --
        add marks ...
    KEYBINDINGS:
        ctrl-s horizontal direction splitw
        ctrl-v vertical direction splitw
        alt-e fzf-tmux-menu splitw
    '
    exit

}
define_env() {
    regex_separate="${CUSTOM_REGEX_SEPARATE:-&}"
    iglob_separate="${CUSTOM_IGLOB_SEPARATE:---}"
    connect_regex="${CUSTOM_CONNECT_REGEX:-.*?}"

    transform_iglob="
    setopt extended_glob
    fzf_query=\${\${FZF_QUERY## ##}%% ##}
    let i=len=flag=0
    while [[ i -lt \${#fzf_query} ]]; do
        if [[ \${fzf_query:\$i:${#regex_separate}} == '${regex_separate}' || \${fzf_query:\$i:${#iglob_separate}} == '${iglob_separate}' ]]; then
            if [[ flag -eq 0 ]]; then
                append_str=\"\${\${\${fzf_query:\$[i-len]:\$len}## ##}%% ##}\"
                search_str+=\"\${append_str:+\${search_str:+${connect_regex}}}\$append_str\"
            else
                for iglob_entry in \${(s/ /)\${fzf_query:\$[i-len]:\$len}}
                do
                    case \$iglob_entry in 
                    *)
                        iglob_str+=\"'--iglob=\$iglob_entry' \"
                        ;;
                    esac
                done
            fi
            [[ \${fzf_query:\$i:${#regex_separate}} == '${regex_separate}' ]] && let flag=0,len=0,i+=${#regex_separate} 
            [[ \${fzf_query:\$i:${#iglob_separate}} == '${iglob_separate}' ]] && let flag=1,len=0,i+=${#iglob_separate}
        else
            let len++,i++
        fi
    done
    if [[ len -gt 0 ]]; then
        if [[ flag -eq 0 ]]; then
            append_str=\"\${\${\${fzf_query:\$[i-len]:\$len}## ##}%% ##}\"
            search_str+=\"\${append_str:+\${search_str:+${connect_regex}}}\$append_str\"
        else
            for iglob_entry in \${(s/ /)\${fzf_query:\$[i-len]:\$len}}
            do
                case \$iglob_entry in 
                *)
                    iglob_str+=\"'--iglob=\$iglob_entry' \"
                    ;;
                esac
            done
        fi
    fi
    echo \"reload:sleep 0.1;${rg_prefix} \${iglob_str} '\$search_str' ${directories[*]} || true\"
    "
}

add_regular_directores() {
    for arg in "$@"; do
        if [[ -d "$arg" ]]; then
            directories+=("$arg")
        else
            echo "$arg not a directory"
            exit 1
        fi
    done

}

add_mark_directores() {
    [[ -z $parse_toml ]] && source "${CUSTOM_HOME}/scripts/tools/parse-toml"

    for arg in "$@"; do
        dirs=$(toml::gmark "$arg")
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
        for directory in ${dirs}; do
            if [[ "$directory" == ${PWD}* ]]; then
                directories+=("$(realpath --no-symlinks --relative-to=${PWD} $directory)")
            else
                directories+=("$directory")
            fi
        done
    done
}

fzf_search() {
    if ! define_env; then
        echo "define_env error"
        exit 1
    fi

    action=/tmp/$$
    [[ -e $action ]] && exit 1
    file_r="/tmp/rg$$"
    file_f="/tmp/fzf$$"
    trap "command rm -f ${action} ${file_f} ${file_r}" EXIT SIGINT SIGTERM

    action_e="execute(${EDITOR} {1} +{2} > /dev/tty < /dev/tty)"

    # +m -> -m multi select
    readarray -t files < <(
        ${fzf_bin:-fzf} --disabled \
            --query "$init_query" --prompt "Rg> " \
            --exact \
            --bind "start:unbind(?)+reload:${rg_prefix} {q} ${directories[*]}" \
            --bind "change:transform:$transform_iglob" \
            --bind "ctrl-t:transform:[[ ! \$FZF_PROMPT =~ Rg ]] &&
            echo \"rebind(change)+change-prompt(Rg> )+disable-search+transform-query:echo \{q} > $file_f; cat $file_r\" ||
            echo \"unbind(change)+change-prompt(Fzf> )+enable-search+transform-query:echo \{q} > $file_r; cat $file_f\"" \
            --delimiter : \
            --header-first --header "keybindings: C-t(toggle fzf|rg), C-s(hsp), C-v(vsp), C-o(fzf-tmux-menu), A-e(execute editor)," \
            --preview 'bat --style=numbers,header,changes,snip --color=always --highlight-line {2} -- {1}' \
            --preview-window 'default:right:60%:~1:+{2}+3/2:border-left' \
            --bind="ctrl-s:transform:echo h > $action; echo accept" \
            --bind="ctrl-v:transform:echo v > $action; echo accept" \
            --bind="ctrl-o:transform:echo m > $action; echo accept" \
            --bind="alt-e:transform:[[ \"${fzf_bin}\" ]] && echo \"ignore\" || echo \"${action_e}\"" \
            --bind="enter:accept" | awk 'BEGIN{FS=":"}{printf("%s +%s\n", $1, $2)}'
    )
}

exec_action() {
    flag=$(command cat "$action" 2> /dev/null)

    if [[ "${flag}" =~ ^(h|v)$ ]]; then
        eval "tmux splitw -b${flag} zsh -c \"${EDITOR} ${files[*]}\""
    elif [[ "${flag}" == m ]]; then
        ((i = 0))
        while [[ $i -lt ${#files[@]} ]]; do
            read -r file_path file_line <<< "${files[$i]}"
            files[$i]="$(realpath ${file_path}) ${file_line}"
            ((i++))
        done
        eval "$CUSTOM_HOME/scripts/tmux/tmux-menu ${files[*]}"
    else
        eval "${EDITOR} ${files[*]}"
    fi
}
main() {
    [[ $# -gt 0 && "$1" == help ]] && help
    [[ -v TMUX ]] && command -v fzf-tmux &> /dev/null && fzf_bin="fzf-tmux -p100%,95%"

    # global
    typeset -A marks_map
    typeset -a directories files
    typeset transform_iglob action rg_prefix

    # args
    typeset -a types left_args right_args
    typeset no_ignore init_query max_depth=8 hidden=true

    ((i = 1))
    while [[ i -le $# && "${!i}" != "--" ]]; do
        left_args+=("${!i}")
        ((i++))
    done
    right_args=("${@:$((i + 1))}")

    args=$(getopt -o hID:t:q: -l no-popup -n "$0" -- "${left_args[@]}")
    if [[ $? != 0 ]]; then
        echo "getopt parse error"
        exit 1
    fi
    eval set -- "$args"

    while true; do
        case "$1" in
        --no-popup)
            fzf_bin=
            shift
            ;;
        -q)
            init_query="$2"
            shift 2
            ;;
        -t)
            while read -r type; do
                types+=("--type=$type")
            done < <(echo "$2" | tr ',' '\n')
            shift 2
            ;;
        -h)
            unset hidden
            shift
            ;;
        -I)
            no_ignore="--no-ignore"
            shift
            ;;
        -D)
            max_depth=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        ?)
            echo "args error"
            exit 1
            ;;
        esac
    done

    [[ $# -gt 0 ]] && add_regular_directores "$@"
    [[ ${#right_args} -gt 0 ]] && add_mark_directores "${right_args[@]}"

    rg_prefix="command rg --line-number --no-heading --color=always --smart-case \
          ${types[*]:-} ${hidden:+--hidden} ${no_ignore} --max-depth=${max_depth}"

    fzf_search

    [[ ${#files[@]} -gt 0 ]] && exec_action
}
main "$@"
# parse_directory_mark "$@"
