#!/bin/env bash

typeset -A MARKS_LIST=(
    [nv]="$HOME/.config/${NVIM_APPNAME:-nvim}/lua"
    [zsh]="$HOME/.config/zsh"
    [zzd]="$HOME/.config/zsh/zsh.d"
    [zzt]="$HOME/.config/zsh/zinit"
    [lbin]="$HOME/.local/bin"
    [home]="$HOME"
    [git]="$HOME/git"
    [dot]="$HOME/dotfiles"
)

help() {
    echo >&2 'usage: fd [OPTIONS] [DIRECTORES] [--] [DIRECTORY MARKS]

    OPTIONS:
        -f regular files
        -d directory files
        -x executable files
        -t changed after time ( 1min 1h 1d(default) 2weeks "2018-10-27 10:00:00" 2018-10-27)
        -D max-depth
        -h cancel --hidden
        -n --no-ignore
        -g ls git files (mdkois)

        --
        add marks ...
    '
    exit
}

parse_args() {
    typeset -a types
    typeset changed_time max_depth=8 no_ignore hidden=true

    args=$(getopt -o fdxhnD:t::g:: -n "$0" -- "$@")

    if [[ $? != 0 ]]; then
        echo "getopt parse error"
        exit 1
    fi

    eval set -- "$args"

    while true; do
        case "$1" in
        -g)
            if ! git rev-parse --is-inside-work-tree &> /dev/null; then
                echo "not a git directory"
                exit 1
            fi
            if [[ -n $2 ]]; then
                flags=$2
                let i=0
                while [[ $i -lt ${#flags} ]]; do
                    case ${flags:$i:1} in
                    m)
                        GIT_FLAGS+=("--modified")
                        ;;
                    d)
                        GIT_FLAGS+=("--deleted")
                        ;;
                    s)
                        GIT_FLAGS+=("--stage")
                        ;;
                    k)
                        GIT_FLAGS+=("--killed")
                        ;;
                    i)
                        GIT_FLAGS+=("--ignored")
                        ;;
                    o)
                        GIT_FLAGS+=("--others")
                        ;;
                    *)
                        echo "flag error"
                        exit 1
                        ;;
                    esac
                    let i++
                done
            fi
            GIT=true
            shift 2
            ;;
        -f)
            types+=("-tf")
            shift
            ;;
        -d)
            types+=("-td")
            shift
            ;;
        -x)
            types+=("-tx")
            shift
            ;;
        -t)
            case $2 in
            "")
                changed_time="--changed-after=1d"
                ;;
            *)
                changed_time="--changed-after=$2"
                ;;
            esac
            shift 2
            ;;
        -h)
            unset hidden
            shift
            ;;
        -n)
            no_ignore=true
            shift
            ;;
        -D)
            max_depth=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        ?)
            echo "args $1 $2 error"
            exit 1
            ;;
        esac
    done

    if [[ -z $GIT ]]; then
        ARGS=(
            "--color=always"
            "--follow"
            "--max-depth=${max_depth}"
            "${types[@]:--tf}"
            ${hidden:+--hidden}
            ${no_ignore:+--no-ignore}
            ${changed_time}
        )
    fi

    for arg in "$@"; do
        if [[ ! -d $arg ]]; then
            echo "$arg is not a directory"
            exit 1
        fi
        DIRECTORES+=("$arg")
    done
}

check_mark() {
    for arg in "$@"; do
        if [[ -d ${MARKS_LIST[$arg]} ]]; then
            DIRECTORES+=("${MARKS_LIST[$arg]}")
        else
            echo "$arg not a mark"
            exit 1
        fi
    done
}
main() {
    [[ $# -gt 0 && "$1" == help ]] && help
    [[ -v TMUX ]] && fzf_bin="fzf-tmux $FZF_TMUX_OPTS"

    typeset -a ARGS DIRECTORES GIT_FLAGS
    typeset GIT

    # 找到 -- 未来解析 marks
    ((g = 1))
    while [[ g -le $# && "${!g}" != "--" ]]; do
        ((g++))
    done

    # 解析 -- 前的
    parse_args "${@:1:$g}"

    # 判断是否为git
    if [[ -n $GIT ]]; then
        cmd="git ls-files ${GIT_FLAGS[*]} ${DIRECTORES[*]} | lscolors"
    else
        check_mark "${@:$((g + 1))}"
        cmd="command fd ${ARGS[*]} ${DIRECTORES[*]:+^} ${DIRECTORES[*]}"
    fi

    flag=/tmp/$$
    trap "command rm -f $flag" EXIT SIGINT SIGTERM
    result=$(
        eval "$cmd" | ${fzf_bin:-fzf} --prompt 'Files> ' \
            --delimiter / \
            --bind="alt-e:transform:touch $flag; echo accept-non-empty" \
            --bind='enter:accept'
    )

    if [[ -n "$result" ]]; then
        if [[ -e $flag ]]; then
            fzf-tmux-menu $(realpath $result)
        else
            "$EDITOR" $result
        fi
    fi
}

main "$@"
